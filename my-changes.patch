From 39f37b6a4fa8c0c16ab46e057b385bebaacfa49a Mon Sep 17 00:00:00 2001
From: Cloud User <ec2-user@ip-10-0-1-200.us-west-2.compute.internal>
Date: Tue, 15 Apr 2025 21:17:31 +0000
Subject: [PATCH] initial commit

---
 .env                                          |   5 +
 .gitignore                                    |  37 +
 .terraform.lock.hcl                           |  53 ++
 Makefile                                      |  15 +
 cloud-setup/.gitkeep                          |   0
 local-setup/.terraform.lock.hcl               |  53 ++
 local-setup/Makefile                          |  23 +
 .../argocd/argocd-conf/argocd-github-app.yaml |  21 +
 .../argocd-conf/argocd-github-app.yaml.tmpl   |  21 +
 .../argocd/argocd-conf/argocd-ingress.yaml    |  16 +
 local-setup/argocd/argocd-conf/values.yaml    |  10 +
 local-setup/argocd/argocd-login.txt           |   1 +
 local-setup/argocd/main.tf                    |  56 ++
 local-setup/argocd/outputs.tf                 |   0
 local-setup/argocd/variables.tf               |  23 +
 local-setup/kind/config.yaml                  |  11 +
 local-setup/kind/config.yaml.tmpl             |  11 +
 local-setup/kind/ingress-nginx.yaml           | 674 ++++++++++++++++++
 local-setup/kind/main.tf                      |  40 ++
 local-setup/kind/output.tf                    |   4 +
 local-setup/kind/variables.tf                 |  14 +
 local-setup/main.tf                           |  19 +
 local-setup/outputs.tf                        |   3 +
 local-setup/provider.tf                       |   5 +
 local-setup/variables.tf                      |  45 ++
 25 files changed, 1160 insertions(+)
 create mode 100644 .env
 create mode 100644 .gitignore
 create mode 100644 .terraform.lock.hcl
 create mode 100644 Makefile
 create mode 100644 cloud-setup/.gitkeep
 create mode 100644 local-setup/.terraform.lock.hcl
 create mode 100644 local-setup/Makefile
 create mode 100755 local-setup/argocd/argocd-conf/argocd-github-app.yaml
 create mode 100644 local-setup/argocd/argocd-conf/argocd-github-app.yaml.tmpl
 create mode 100644 local-setup/argocd/argocd-conf/argocd-ingress.yaml
 create mode 100644 local-setup/argocd/argocd-conf/values.yaml
 create mode 100644 local-setup/argocd/argocd-login.txt
 create mode 100644 local-setup/argocd/main.tf
 create mode 100644 local-setup/argocd/outputs.tf
 create mode 100644 local-setup/argocd/variables.tf
 create mode 100755 local-setup/kind/config.yaml
 create mode 100644 local-setup/kind/config.yaml.tmpl
 create mode 100644 local-setup/kind/ingress-nginx.yaml
 create mode 100644 local-setup/kind/main.tf
 create mode 100644 local-setup/kind/output.tf
 create mode 100644 local-setup/kind/variables.tf
 create mode 100644 local-setup/main.tf
 create mode 100644 local-setup/outputs.tf
 create mode 100644 local-setup/provider.tf
 create mode 100644 local-setup/variables.tf

diff --git a/.env b/.env
new file mode 100644
index 0000000..6f3070f
--- /dev/null
+++ b/.env
@@ -0,0 +1,5 @@
+# Configuration variables
+TF_VAR_cluster_name=neo-test
+TF_VAR_http_ingress_port=8889
+TF_VAR_https_ingress_port=4449
+KIND_EXPERIMENTAL_PROVIDER=podman
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..21e6d3c
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,37 @@
+# Local .terraform directories
+**/.terraform/*
+
+# .tfstate files
+*.tfstate
+*.tfstate.*
+
+# Crash log files
+crash.log
+crash.*.log
+
+# Exclude all .tfvars files, which are likely to contain sensitive data, such as
+# password, private keys, and other secrets. These should not be part of version 
+# control as they are data points which are potentially sensitive and subject 
+# to change depending on the environment.
+*.tfvars
+*.tfvars.json
+
+# Ignore override files as they are usually used to override resources locally and so
+# are not checked in
+override.tf
+override.tf.json
+*_override.tf
+*_override.tf.json
+
+# Ignore transient lock info files created by terraform apply
+.terraform.tfstate.lock.info
+
+# Include override files you do wish to add to version control using negated pattern
+# !example_override.tf
+
+# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
+# example: *tfplan*
+
+# Ignore CLI configuration files
+.terraformrc
+terraform.rc
\ No newline at end of file
diff --git a/.terraform.lock.hcl b/.terraform.lock.hcl
new file mode 100644
index 0000000..4f25a27
--- /dev/null
+++ b/.terraform.lock.hcl
@@ -0,0 +1,53 @@
+# This file is maintained automatically by "tofu init".
+# Manual edits may be lost in future updates.
+
+provider "registry.opentofu.org/hashicorp/helm" {
+  version = "2.17.0"
+  hashes = [
+    "h1:69PnHoYrrDrm7C8+8PiSvRGPI55taqL14SvQR/FGM+g=",
+    "zh:02690815e35131a42cb9851f63a3369c216af30ad093d05b39001d43da04b56b",
+    "zh:27a62f12b29926387f4d71aeeee9f7ffa0ccb81a1b6066ee895716ad050d1b7a",
+    "zh:2d0a5babfa73604b3fefc9dab9c87f91c77fce756c2e32b294e9f1290aed26c0",
+    "zh:3976400ceba6dda4636e1d297e3097e1831de5628afa534a166de98a70d1dcbe",
+    "zh:54440ef14f342b41d75c1aded7487bfcc3f76322b75894235b47b7e89ac4bfa4",
+    "zh:6512e2ab9f2fa31cbb90d9249647b5c5798f62eb1215ec44da2cdaa24e38ad25",
+    "zh:795f327ca0b8c5368af0ed03d5d4f6da7260692b4b3ca0bd004ed542e683464d",
+    "zh:ba659e1d94f224bc3f1fd34cbb9d2663e3a8e734108e5a58eb49eda84b140978",
+    "zh:c5c8575c4458835c2acbc3d1ed5570589b14baa2525d8fbd04295c097caf41eb",
+    "zh:e0877a5dac3de138e61eefa26b2f5a13305a17259779465899880f70e11314e0",
+  ]
+}
+
+provider "registry.opentofu.org/hashicorp/local" {
+  version = "2.5.2"
+  hashes = [
+    "h1:6lS+5A/4WFAqY3/RHWFRBSiFVLPRjvLaUgxPQvjXLHU=",
+    "zh:25b95b76ceaa62b5c95f6de2fa6e6242edbf51e7fc6c057b7f7101aa4081f64f",
+    "zh:3c974fdf6b42ca6f93309cf50951f345bfc5726ec6013b8832bcd3be0eb3429e",
+    "zh:5de843bf6d903f5cca97ce1061e2e06b6441985c68d013eabd738a9e4b828278",
+    "zh:86beead37c7b4f149a54d2ae633c99ff92159c748acea93ff0f3603d6b4c9f4f",
+    "zh:8e52e81d3dc50c3f79305d257da7fde7af634fed65e6ab5b8e214166784a720e",
+    "zh:9882f444c087c69559873b2d72eec406a40ede21acb5ac334d6563bf3a2387df",
+    "zh:a4484193d110da4a06c7bffc44cc6b61d3b5e881cd51df2a83fdda1a36ea25d2",
+    "zh:a53342426d173e29d8ee3106cb68abecdf4be301a3f6589e4e8d42015befa7da",
+    "zh:d25ef2aef6a9004363fc6db80305d30673fc1f7dd0b980d41d863b12dacd382a",
+    "zh:fa2d522fb323e2121f65b79709fd596514b293d816a1d969af8f72d108888e4c",
+  ]
+}
+
+provider "registry.opentofu.org/hashicorp/null" {
+  version = "3.2.3"
+  hashes = [
+    "h1:LF8arSzHfhbyQSFtTMTYEqCM34klzrbAQBJMHYCs9d8=",
+    "zh:1d57d25084effd3fdfd902eca00020b34b1fb020253b84d7dd471301606015ac",
+    "zh:65b7f9799b88464d9c2ec529713b7f52ea744275b61a8dc86cdedab1b2dcb933",
+    "zh:80d3e9c95b7b4ae7c54005cd127cae82e5c53d2b7023ef24c147337bac9dadd9",
+    "zh:841b60c07683e4bf456799ccd718896fdafdcc2c49252ae09967f2e74d8c8a03",
+    "zh:8fa1c592a9c78222e35713c6edb3f1f818a4c6f3524a30a209f0a7e919827b68",
+    "zh:bb795cc1429e09466840c09d39a28edf1db5070b1ec76822fc1173906a264572",
+    "zh:da1784818a89bea29dfe660632f0060a7a843e4e564d74435fbeca002b0f7d2a",
+    "zh:f409bf21b1cdaa6dac47cd79806f3d93f67e9507fe4dbf33b0165335f53bc2e1",
+    "zh:fbea7a1ff84b430ba9594698e93196d81d03e4036de3d1cafccb2a96d5b38581",
+    "zh:fbf0c84663a7e85881388d7d71ac862184f05fbf2d17ecf76bc5d3d7503ea260",
+  ]
+}
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..13d376b
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,15 @@
+# Define shell for consistent behavior
+SHELL := /bin/bash
+
+.PHONY:
+	clean
+	all
+	test
+	list
+
+local-setup-list:
+	$(MAKE) -C local-setup list
+
+local-deploy:
+	$(MAKE) -C local-setup init
+	$(MAKE) -C local-setup deploy
diff --git a/cloud-setup/.gitkeep b/cloud-setup/.gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/local-setup/.terraform.lock.hcl b/local-setup/.terraform.lock.hcl
new file mode 100644
index 0000000..4f25a27
--- /dev/null
+++ b/local-setup/.terraform.lock.hcl
@@ -0,0 +1,53 @@
+# This file is maintained automatically by "tofu init".
+# Manual edits may be lost in future updates.
+
+provider "registry.opentofu.org/hashicorp/helm" {
+  version = "2.17.0"
+  hashes = [
+    "h1:69PnHoYrrDrm7C8+8PiSvRGPI55taqL14SvQR/FGM+g=",
+    "zh:02690815e35131a42cb9851f63a3369c216af30ad093d05b39001d43da04b56b",
+    "zh:27a62f12b29926387f4d71aeeee9f7ffa0ccb81a1b6066ee895716ad050d1b7a",
+    "zh:2d0a5babfa73604b3fefc9dab9c87f91c77fce756c2e32b294e9f1290aed26c0",
+    "zh:3976400ceba6dda4636e1d297e3097e1831de5628afa534a166de98a70d1dcbe",
+    "zh:54440ef14f342b41d75c1aded7487bfcc3f76322b75894235b47b7e89ac4bfa4",
+    "zh:6512e2ab9f2fa31cbb90d9249647b5c5798f62eb1215ec44da2cdaa24e38ad25",
+    "zh:795f327ca0b8c5368af0ed03d5d4f6da7260692b4b3ca0bd004ed542e683464d",
+    "zh:ba659e1d94f224bc3f1fd34cbb9d2663e3a8e734108e5a58eb49eda84b140978",
+    "zh:c5c8575c4458835c2acbc3d1ed5570589b14baa2525d8fbd04295c097caf41eb",
+    "zh:e0877a5dac3de138e61eefa26b2f5a13305a17259779465899880f70e11314e0",
+  ]
+}
+
+provider "registry.opentofu.org/hashicorp/local" {
+  version = "2.5.2"
+  hashes = [
+    "h1:6lS+5A/4WFAqY3/RHWFRBSiFVLPRjvLaUgxPQvjXLHU=",
+    "zh:25b95b76ceaa62b5c95f6de2fa6e6242edbf51e7fc6c057b7f7101aa4081f64f",
+    "zh:3c974fdf6b42ca6f93309cf50951f345bfc5726ec6013b8832bcd3be0eb3429e",
+    "zh:5de843bf6d903f5cca97ce1061e2e06b6441985c68d013eabd738a9e4b828278",
+    "zh:86beead37c7b4f149a54d2ae633c99ff92159c748acea93ff0f3603d6b4c9f4f",
+    "zh:8e52e81d3dc50c3f79305d257da7fde7af634fed65e6ab5b8e214166784a720e",
+    "zh:9882f444c087c69559873b2d72eec406a40ede21acb5ac334d6563bf3a2387df",
+    "zh:a4484193d110da4a06c7bffc44cc6b61d3b5e881cd51df2a83fdda1a36ea25d2",
+    "zh:a53342426d173e29d8ee3106cb68abecdf4be301a3f6589e4e8d42015befa7da",
+    "zh:d25ef2aef6a9004363fc6db80305d30673fc1f7dd0b980d41d863b12dacd382a",
+    "zh:fa2d522fb323e2121f65b79709fd596514b293d816a1d969af8f72d108888e4c",
+  ]
+}
+
+provider "registry.opentofu.org/hashicorp/null" {
+  version = "3.2.3"
+  hashes = [
+    "h1:LF8arSzHfhbyQSFtTMTYEqCM34klzrbAQBJMHYCs9d8=",
+    "zh:1d57d25084effd3fdfd902eca00020b34b1fb020253b84d7dd471301606015ac",
+    "zh:65b7f9799b88464d9c2ec529713b7f52ea744275b61a8dc86cdedab1b2dcb933",
+    "zh:80d3e9c95b7b4ae7c54005cd127cae82e5c53d2b7023ef24c147337bac9dadd9",
+    "zh:841b60c07683e4bf456799ccd718896fdafdcc2c49252ae09967f2e74d8c8a03",
+    "zh:8fa1c592a9c78222e35713c6edb3f1f818a4c6f3524a30a209f0a7e919827b68",
+    "zh:bb795cc1429e09466840c09d39a28edf1db5070b1ec76822fc1173906a264572",
+    "zh:da1784818a89bea29dfe660632f0060a7a843e4e564d74435fbeca002b0f7d2a",
+    "zh:f409bf21b1cdaa6dac47cd79806f3d93f67e9507fe4dbf33b0165335f53bc2e1",
+    "zh:fbea7a1ff84b430ba9594698e93196d81d03e4036de3d1cafccb2a96d5b38581",
+    "zh:fbf0c84663a7e85881388d7d71ac862184f05fbf2d17ecf76bc5d3d7503ea260",
+  ]
+}
diff --git a/local-setup/Makefile b/local-setup/Makefile
new file mode 100644
index 0000000..2c5b21f
--- /dev/null
+++ b/local-setup/Makefile
@@ -0,0 +1,23 @@
+# Define shell for consistent behavior
+SHELL := /bin/bash
+
+# Main targets
+.PHONY: tofu-install deploy init plan list
+
+tofu-install:
+	curl --proto '=https' --tlsv1.2 -fsSL https://get.opentofu.org/install-opentofu.sh -o install-opentofu.sh
+	chmod +x install-opentofu.sh
+	./install-opentofu.sh --install-method rpm
+	rm -f install-opentofu.sh
+
+deploy:
+	tofu apply --auto-approve
+
+init:
+	tofu init
+
+plan:
+	tofu plan
+
+list:
+	@grep '^[^#[:space:]].*:' Makefile
diff --git a/local-setup/argocd/argocd-conf/argocd-github-app.yaml b/local-setup/argocd/argocd-conf/argocd-github-app.yaml
new file mode 100755
index 0000000..5286ab9
--- /dev/null
+++ b/local-setup/argocd/argocd-conf/argocd-github-app.yaml
@@ -0,0 +1,21 @@
+apiVersion: argoproj.io/v1alpha1
+kind: Application
+metadata:
+  name: nginx-app
+  namespace: argocd
+spec:
+  project: default
+  source:
+    repoURL: https://github.com/amarouane-ABDELHAK/eks-apps
+    targetRevision: main
+    path: app/nginx_app
+  destination:
+    server: 'https://kubernetes.default.svc'
+    namespace: default
+  syncPolicy:
+    automated:
+      prune: true
+      selfHeal: true
+    syncOptions:
+    - CreateNamespace=true
+
diff --git a/local-setup/argocd/argocd-conf/argocd-github-app.yaml.tmpl b/local-setup/argocd/argocd-conf/argocd-github-app.yaml.tmpl
new file mode 100644
index 0000000..f74aabe
--- /dev/null
+++ b/local-setup/argocd/argocd-conf/argocd-github-app.yaml.tmpl
@@ -0,0 +1,21 @@
+apiVersion: argoproj.io/v1alpha1
+kind: Application
+metadata:
+  name: ${app_name}
+  namespace: argocd
+spec:
+  project: ${project_name}
+  source:
+    repoURL: ${repo_url}
+    targetRevision: ${target_branch}
+    path: ${target_path}
+  destination:
+    server: 'https://kubernetes.default.svc'
+    namespace: default
+  syncPolicy:
+    automated:
+      prune: true
+      selfHeal: true
+    syncOptions:
+    - CreateNamespace=true
+
diff --git a/local-setup/argocd/argocd-conf/argocd-ingress.yaml b/local-setup/argocd/argocd-conf/argocd-ingress.yaml
new file mode 100644
index 0000000..40f7c00
--- /dev/null
+++ b/local-setup/argocd/argocd-conf/argocd-ingress.yaml
@@ -0,0 +1,16 @@
+apiVersion: networking.k8s.io/v1
+kind: Ingress
+metadata:
+  name: argo-ingress
+  namespace: argocd
+spec:
+  rules:
+  - http:
+      paths:
+      - pathType: Prefix
+        path: /argocd
+        backend:
+          service:
+            name: argocd-server
+            port:
+              number: 80
diff --git a/local-setup/argocd/argocd-conf/values.yaml b/local-setup/argocd/argocd-conf/values.yaml
new file mode 100644
index 0000000..837a63e
--- /dev/null
+++ b/local-setup/argocd/argocd-conf/values.yaml
@@ -0,0 +1,10 @@
+global:
+  image:
+    tag: "latest"
+
+
+server:
+  extraArgs:
+  - --insecure
+  - --rootpath=/argocd
+  - --basehref=/argocd
diff --git a/local-setup/argocd/argocd-login.txt b/local-setup/argocd/argocd-login.txt
new file mode 100644
index 0000000..99cab41
--- /dev/null
+++ b/local-setup/argocd/argocd-login.txt
@@ -0,0 +1 @@
+-pxw6Bphg8Wte6ns
\ No newline at end of file
diff --git a/local-setup/argocd/main.tf b/local-setup/argocd/main.tf
new file mode 100644
index 0000000..1bbff62
--- /dev/null
+++ b/local-setup/argocd/main.tf
@@ -0,0 +1,56 @@
+resource "helm_release" "argocd" {
+  name             = "argocd"
+  repository       = "https://argoproj.github.io/argo-helm"
+  chart            = "argo-cd"
+  namespace        = "argocd"
+  create_namespace = true
+  values           = [file("${path.root}/argocd/argocd-conf/values.yaml")]
+  timeout = 1200 # Increase timeout to 1one hour
+}
+
+resource "null_resource" "password" {
+  depends_on = [helm_release.argocd]
+  provisioner "local-exec" {
+    working_dir = "./argocd"
+    command     = "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath={.data.password} | base64 -d > argocd-login.txt"
+  }
+}
+
+resource "null_resource" "argocd-ingess" {
+  depends_on = [helm_release.argocd, helm_release.argocd]
+  provisioner "local-exec" {
+    working_dir = "./argocd"
+    command     = "kubectl apply -f ./argocd-conf/argocd-ingress.yaml"
+  }
+}
+
+
+resource "local_file" "argocd-github-conf-template" {
+
+  content = templatefile("${path.root}/argocd/argocd-conf/argocd-github-app.yaml.tmpl",
+    {
+      app_name      = var.app_name
+      project_name  = var.project_name
+      repo_url      = var.repo_url
+      target_path   = var.target_path
+      target_branch = var.target_branch
+
+    }
+
+
+  )
+  filename = "${path.root}/argocd/argocd-conf/argocd-github-app.yaml"
+}
+
+resource "null_resource" "argocd-github-conf" {
+  depends_on = [null_resource.argocd-ingess, local_file.argocd-github-conf-template]
+  triggers = {
+    config_hash = sha256(file("${path.root}/argocd/argocd-conf/argocd-github-app.yaml.tmpl"))
+
+
+  }
+  provisioner "local-exec" {
+    working_dir = "./argocd"
+    command     = "kubectl apply -f ./argocd-conf/argocd-github-app.yaml"
+  }
+}
diff --git a/local-setup/argocd/outputs.tf b/local-setup/argocd/outputs.tf
new file mode 100644
index 0000000..e69de29
diff --git a/local-setup/argocd/variables.tf b/local-setup/argocd/variables.tf
new file mode 100644
index 0000000..3b27aac
--- /dev/null
+++ b/local-setup/argocd/variables.tf
@@ -0,0 +1,23 @@
+variable "app_name" {
+  type        = string
+  description = "github Application Name"
+}
+
+variable "project_name" {
+  type        = string
+  description = "ArgoCD Project Name"
+}
+
+variable "target_branch" {
+  type        = string
+  description = "Target Branch Name"
+}
+
+variable "repo_url" {
+  type        = string
+  description = "Repo URL"
+}
+variable "target_path" {
+  type        = string
+  description = "Repo target path"
+}
diff --git a/local-setup/kind/config.yaml b/local-setup/kind/config.yaml
new file mode 100755
index 0000000..851524c
--- /dev/null
+++ b/local-setup/kind/config.yaml
@@ -0,0 +1,11 @@
+kind: Cluster
+apiVersion: kind.x-k8s.io/v1alpha4
+nodes:
+- role: control-plane
+  extraPortMappings:
+  - containerPort: 80
+    hostPort: 8889
+    protocol: TCP
+  - containerPort: 443
+    hostPort: 4449
+    protocol: TCP
diff --git a/local-setup/kind/config.yaml.tmpl b/local-setup/kind/config.yaml.tmpl
new file mode 100644
index 0000000..51b91cb
--- /dev/null
+++ b/local-setup/kind/config.yaml.tmpl
@@ -0,0 +1,11 @@
+kind: Cluster
+apiVersion: kind.x-k8s.io/v1alpha4
+nodes:
+- role: control-plane
+  extraPortMappings:
+  - containerPort: 80
+    hostPort: ${http_ingress_port}
+    protocol: TCP
+  - containerPort: 443
+    hostPort: ${https_ingress_port}
+    protocol: TCP
diff --git a/local-setup/kind/ingress-nginx.yaml b/local-setup/kind/ingress-nginx.yaml
new file mode 100644
index 0000000..efa69b5
--- /dev/null
+++ b/local-setup/kind/ingress-nginx.yaml
@@ -0,0 +1,674 @@
+apiVersion: v1
+kind: Namespace
+metadata:
+  labels:
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+  name: ingress-nginx
+---
+apiVersion: v1
+automountServiceAccountToken: true
+kind: ServiceAccount
+metadata:
+  labels:
+    app.kubernetes.io/component: controller
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx
+  namespace: ingress-nginx
+---
+apiVersion: v1
+automountServiceAccountToken: true
+kind: ServiceAccount
+metadata:
+  labels:
+    app.kubernetes.io/component: admission-webhook
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-admission
+  namespace: ingress-nginx
+---
+apiVersion: rbac.authorization.k8s.io/v1
+kind: Role
+metadata:
+  labels:
+    app.kubernetes.io/component: controller
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx
+  namespace: ingress-nginx
+rules:
+- apiGroups:
+  - ""
+  resources:
+  - namespaces
+  verbs:
+  - get
+- apiGroups:
+  - ""
+  resources:
+  - configmaps
+  - pods
+  - secrets
+  - endpoints
+  verbs:
+  - get
+  - list
+  - watch
+- apiGroups:
+  - ""
+  resources:
+  - services
+  verbs:
+  - get
+  - list
+  - watch
+- apiGroups:
+  - networking.k8s.io
+  resources:
+  - ingresses
+  verbs:
+  - get
+  - list
+  - watch
+- apiGroups:
+  - networking.k8s.io
+  resources:
+  - ingresses/status
+  verbs:
+  - update
+- apiGroups:
+  - networking.k8s.io
+  resources:
+  - ingressclasses
+  verbs:
+  - get
+  - list
+  - watch
+- apiGroups:
+  - coordination.k8s.io
+  resourceNames:
+  - ingress-nginx-leader
+  resources:
+  - leases
+  verbs:
+  - get
+  - update
+- apiGroups:
+  - coordination.k8s.io
+  resources:
+  - leases
+  verbs:
+  - create
+- apiGroups:
+  - ""
+  resources:
+  - events
+  verbs:
+  - create
+  - patch
+- apiGroups:
+  - discovery.k8s.io
+  resources:
+  - endpointslices
+  verbs:
+  - list
+  - watch
+  - get
+---
+apiVersion: rbac.authorization.k8s.io/v1
+kind: Role
+metadata:
+  labels:
+    app.kubernetes.io/component: admission-webhook
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-admission
+  namespace: ingress-nginx
+rules:
+- apiGroups:
+  - ""
+  resources:
+  - secrets
+  verbs:
+  - get
+  - create
+---
+apiVersion: rbac.authorization.k8s.io/v1
+kind: ClusterRole
+metadata:
+  labels:
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx
+rules:
+- apiGroups:
+  - ""
+  resources:
+  - configmaps
+  - endpoints
+  - nodes
+  - pods
+  - secrets
+  - namespaces
+  verbs:
+  - list
+  - watch
+- apiGroups:
+  - coordination.k8s.io
+  resources:
+  - leases
+  verbs:
+  - list
+  - watch
+- apiGroups:
+  - ""
+  resources:
+  - nodes
+  verbs:
+  - get
+- apiGroups:
+  - ""
+  resources:
+  - services
+  verbs:
+  - get
+  - list
+  - watch
+- apiGroups:
+  - networking.k8s.io
+  resources:
+  - ingresses
+  verbs:
+  - get
+  - list
+  - watch
+- apiGroups:
+  - ""
+  resources:
+  - events
+  verbs:
+  - create
+  - patch
+- apiGroups:
+  - networking.k8s.io
+  resources:
+  - ingresses/status
+  verbs:
+  - update
+- apiGroups:
+  - networking.k8s.io
+  resources:
+  - ingressclasses
+  verbs:
+  - get
+  - list
+  - watch
+- apiGroups:
+  - discovery.k8s.io
+  resources:
+  - endpointslices
+  verbs:
+  - list
+  - watch
+  - get
+---
+apiVersion: rbac.authorization.k8s.io/v1
+kind: ClusterRole
+metadata:
+  labels:
+    app.kubernetes.io/component: admission-webhook
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-admission
+rules:
+- apiGroups:
+  - admissionregistration.k8s.io
+  resources:
+  - validatingwebhookconfigurations
+  verbs:
+  - get
+  - update
+---
+apiVersion: rbac.authorization.k8s.io/v1
+kind: RoleBinding
+metadata:
+  labels:
+    app.kubernetes.io/component: controller
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx
+  namespace: ingress-nginx
+roleRef:
+  apiGroup: rbac.authorization.k8s.io
+  kind: Role
+  name: ingress-nginx
+subjects:
+- kind: ServiceAccount
+  name: ingress-nginx
+  namespace: ingress-nginx
+---
+apiVersion: rbac.authorization.k8s.io/v1
+kind: RoleBinding
+metadata:
+  labels:
+    app.kubernetes.io/component: admission-webhook
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-admission
+  namespace: ingress-nginx
+roleRef:
+  apiGroup: rbac.authorization.k8s.io
+  kind: Role
+  name: ingress-nginx-admission
+subjects:
+- kind: ServiceAccount
+  name: ingress-nginx-admission
+  namespace: ingress-nginx
+---
+apiVersion: rbac.authorization.k8s.io/v1
+kind: ClusterRoleBinding
+metadata:
+  labels:
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx
+roleRef:
+  apiGroup: rbac.authorization.k8s.io
+  kind: ClusterRole
+  name: ingress-nginx
+subjects:
+- kind: ServiceAccount
+  name: ingress-nginx
+  namespace: ingress-nginx
+---
+apiVersion: rbac.authorization.k8s.io/v1
+kind: ClusterRoleBinding
+metadata:
+  labels:
+    app.kubernetes.io/component: admission-webhook
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-admission
+roleRef:
+  apiGroup: rbac.authorization.k8s.io
+  kind: ClusterRole
+  name: ingress-nginx-admission
+subjects:
+- kind: ServiceAccount
+  name: ingress-nginx-admission
+  namespace: ingress-nginx
+---
+apiVersion: v1
+data: null
+kind: ConfigMap
+metadata:
+  labels:
+    app.kubernetes.io/component: controller
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-controller
+  namespace: ingress-nginx
+---
+apiVersion: v1
+kind: Service
+metadata:
+  labels:
+    app.kubernetes.io/component: controller
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-controller
+  namespace: ingress-nginx
+spec:
+  ipFamilies:
+  - IPv4
+  ipFamilyPolicy: SingleStack
+  ports:
+  - appProtocol: http
+    name: http
+    port: 80
+    protocol: TCP
+    targetPort: http
+  - appProtocol: https
+    name: https
+    port: 443
+    protocol: TCP
+    targetPort: https
+  selector:
+    app.kubernetes.io/component: controller
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+  type: LoadBalancer
+---
+apiVersion: v1
+kind: Service
+metadata:
+  labels:
+    app.kubernetes.io/component: controller
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-controller-admission
+  namespace: ingress-nginx
+spec:
+  ports:
+  - appProtocol: https
+    name: https-webhook
+    port: 443
+    targetPort: webhook
+  selector:
+    app.kubernetes.io/component: controller
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+  type: ClusterIP
+---
+apiVersion: apps/v1
+kind: Deployment
+metadata:
+  labels:
+    app.kubernetes.io/component: controller
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-controller
+  namespace: ingress-nginx
+spec:
+  minReadySeconds: 0
+  revisionHistoryLimit: 10
+  selector:
+    matchLabels:
+      app.kubernetes.io/component: controller
+      app.kubernetes.io/instance: ingress-nginx
+      app.kubernetes.io/name: ingress-nginx
+  strategy:
+    rollingUpdate:
+      maxUnavailable: 1
+    type: RollingUpdate
+  template:
+    metadata:
+      labels:
+        app.kubernetes.io/component: controller
+        app.kubernetes.io/instance: ingress-nginx
+        app.kubernetes.io/name: ingress-nginx
+        app.kubernetes.io/part-of: ingress-nginx
+        app.kubernetes.io/version: 1.12.1
+    spec:
+      containers:
+      - args:
+        - /nginx-ingress-controller
+        - --election-id=ingress-nginx-leader
+        - --controller-class=k8s.io/ingress-nginx
+        - --ingress-class=nginx
+        - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
+        - --validating-webhook=:8443
+        - --validating-webhook-certificate=/usr/local/certificates/cert
+        - --validating-webhook-key=/usr/local/certificates/key
+        - --watch-ingress-without-class=true
+        - --publish-status-address=localhost
+        env:
+        - name: POD_NAME
+          valueFrom:
+            fieldRef:
+              fieldPath: metadata.name
+        - name: POD_NAMESPACE
+          valueFrom:
+            fieldRef:
+              fieldPath: metadata.namespace
+        - name: LD_PRELOAD
+          value: /usr/local/lib/libmimalloc.so
+        image: registry.k8s.io/ingress-nginx/controller:v1.12.1@sha256:9724476b928967173d501040631b23ba07f47073999e80e34b120e8db5f234d5
+        imagePullPolicy: IfNotPresent
+        lifecycle:
+          preStop:
+            exec:
+              command:
+              - /wait-shutdown
+        livenessProbe:
+          failureThreshold: 5
+          httpGet:
+            path: /healthz
+            port: 10254
+            scheme: HTTP
+          initialDelaySeconds: 10
+          periodSeconds: 10
+          successThreshold: 1
+          timeoutSeconds: 1
+        name: controller
+        ports:
+        - containerPort: 80
+          hostPort: 80
+          name: http
+          protocol: TCP
+        - containerPort: 443
+          hostPort: 443
+          name: https
+          protocol: TCP
+        - containerPort: 8443
+          name: webhook
+          protocol: TCP
+        readinessProbe:
+          failureThreshold: 3
+          httpGet:
+            path: /healthz
+            port: 10254
+            scheme: HTTP
+          initialDelaySeconds: 10
+          periodSeconds: 10
+          successThreshold: 1
+          timeoutSeconds: 1
+        resources:
+          requests:
+            cpu: 100m
+            memory: 90Mi
+        securityContext:
+          allowPrivilegeEscalation: false
+          capabilities:
+            add:
+            - NET_BIND_SERVICE
+            drop:
+            - ALL
+          readOnlyRootFilesystem: false
+          runAsGroup: 82
+          runAsNonRoot: true
+          runAsUser: 101
+          seccompProfile:
+            type: RuntimeDefault
+        volumeMounts:
+        - mountPath: /usr/local/certificates/
+          name: webhook-cert
+          readOnly: true
+      dnsPolicy: ClusterFirst
+      nodeSelector:
+        kubernetes.io/os: linux
+      serviceAccountName: ingress-nginx
+      terminationGracePeriodSeconds: 0
+      tolerations:
+      - effect: NoSchedule
+        key: node-role.kubernetes.io/master
+        operator: Equal
+      - effect: NoSchedule
+        key: node-role.kubernetes.io/control-plane
+        operator: Equal
+      volumes:
+      - name: webhook-cert
+        secret:
+          secretName: ingress-nginx-admission
+---
+apiVersion: batch/v1
+kind: Job
+metadata:
+  labels:
+    app.kubernetes.io/component: admission-webhook
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-admission-create
+  namespace: ingress-nginx
+spec:
+  template:
+    metadata:
+      labels:
+        app.kubernetes.io/component: admission-webhook
+        app.kubernetes.io/instance: ingress-nginx
+        app.kubernetes.io/name: ingress-nginx
+        app.kubernetes.io/part-of: ingress-nginx
+        app.kubernetes.io/version: 1.12.1
+      name: ingress-nginx-admission-create
+    spec:
+      containers:
+      - args:
+        - create
+        - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
+        - --namespace=$(POD_NAMESPACE)
+        - --secret-name=ingress-nginx-admission
+        env:
+        - name: POD_NAMESPACE
+          valueFrom:
+            fieldRef:
+              fieldPath: metadata.namespace
+        image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.4@sha256:a9f03b34a3cbfbb26d103a14046ab2c5130a80c3d69d526ff8063d2b37b9fd3f
+        imagePullPolicy: IfNotPresent
+        name: create
+        securityContext:
+          allowPrivilegeEscalation: false
+          capabilities:
+            drop:
+            - ALL
+          readOnlyRootFilesystem: true
+          runAsGroup: 65532
+          runAsNonRoot: true
+          runAsUser: 65532
+          seccompProfile:
+            type: RuntimeDefault
+      nodeSelector:
+        kubernetes.io/os: linux
+      restartPolicy: OnFailure
+      serviceAccountName: ingress-nginx-admission
+---
+apiVersion: batch/v1
+kind: Job
+metadata:
+  labels:
+    app.kubernetes.io/component: admission-webhook
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-admission-patch
+  namespace: ingress-nginx
+spec:
+  template:
+    metadata:
+      labels:
+        app.kubernetes.io/component: admission-webhook
+        app.kubernetes.io/instance: ingress-nginx
+        app.kubernetes.io/name: ingress-nginx
+        app.kubernetes.io/part-of: ingress-nginx
+        app.kubernetes.io/version: 1.12.1
+      name: ingress-nginx-admission-patch
+    spec:
+      containers:
+      - args:
+        - patch
+        - --webhook-name=ingress-nginx-admission
+        - --namespace=$(POD_NAMESPACE)
+        - --patch-mutating=false
+        - --secret-name=ingress-nginx-admission
+        - --patch-failure-policy=Fail
+        env:
+        - name: POD_NAMESPACE
+          valueFrom:
+            fieldRef:
+              fieldPath: metadata.namespace
+        image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.4@sha256:a9f03b34a3cbfbb26d103a14046ab2c5130a80c3d69d526ff8063d2b37b9fd3f
+        imagePullPolicy: IfNotPresent
+        name: patch
+        securityContext:
+          allowPrivilegeEscalation: false
+          capabilities:
+            drop:
+            - ALL
+          readOnlyRootFilesystem: true
+          runAsGroup: 65532
+          runAsNonRoot: true
+          runAsUser: 65532
+          seccompProfile:
+            type: RuntimeDefault
+      nodeSelector:
+        kubernetes.io/os: linux
+      restartPolicy: OnFailure
+      serviceAccountName: ingress-nginx-admission
+---
+apiVersion: networking.k8s.io/v1
+kind: IngressClass
+metadata:
+  labels:
+    app.kubernetes.io/component: controller
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: nginx
+spec:
+  controller: k8s.io/ingress-nginx
+---
+apiVersion: admissionregistration.k8s.io/v1
+kind: ValidatingWebhookConfiguration
+metadata:
+  labels:
+    app.kubernetes.io/component: admission-webhook
+    app.kubernetes.io/instance: ingress-nginx
+    app.kubernetes.io/name: ingress-nginx
+    app.kubernetes.io/part-of: ingress-nginx
+    app.kubernetes.io/version: 1.12.1
+  name: ingress-nginx-admission
+webhooks:
+- admissionReviewVersions:
+  - v1
+  clientConfig:
+    service:
+      name: ingress-nginx-controller-admission
+      namespace: ingress-nginx
+      path: /networking/v1/ingresses
+      port: 443
+  failurePolicy: Fail
+  matchPolicy: Equivalent
+  name: validate.nginx.ingress.kubernetes.io
+  rules:
+  - apiGroups:
+    - networking.k8s.io
+    apiVersions:
+    - v1
+    operations:
+    - CREATE
+    - UPDATE
+    resources:
+    - ingresses
+  sideEffects: None
diff --git a/local-setup/kind/main.tf b/local-setup/kind/main.tf
new file mode 100644
index 0000000..5ef08e8
--- /dev/null
+++ b/local-setup/kind/main.tf
@@ -0,0 +1,40 @@
+
+resource "local_file" "kind-template" {
+
+  content = templatefile("${path.root}/kind/config.yaml.tmpl",
+    {
+      http_ingress_port  = var.http_ingress_port
+      https_ingress_port = var.https_ingress_port
+      config_tmpl_hash = sha256(file("${path.root}/kind/config.yaml.tmpl"))
+    }
+
+
+  )
+  filename = "${path.root}/kind/config.yaml"
+}
+
+
+resource "null_resource" "setup-kind" {
+  depends_on = [local_file.kind-template]
+  triggers = {
+    config_hash = sha256(file("${path.root}/kind/config.yaml.tmpl"))
+  }
+  provisioner "local-exec" {
+
+    working_dir = "./kind"
+    command     = "systemd-run --scope --user -p \"Delegate=yes\" kind create cluster --name ${var.cluster_name} --config=config.yaml"
+  }
+}
+
+
+
+resource "null_resource" "setup-kind-ingress" {
+  depends_on = [null_resource.setup-kind]
+  triggers = {
+    ingress_config_hash = sha256(file("${path.root}/kind/ingress-nginx.yaml"))
+  }
+  provisioner "local-exec" {
+    working_dir = "./kind"
+    command     = "kubectl apply -f ingress-nginx.yaml"
+  }
+}
diff --git a/local-setup/kind/output.tf b/local-setup/kind/output.tf
new file mode 100644
index 0000000..43090f1
--- /dev/null
+++ b/local-setup/kind/output.tf
@@ -0,0 +1,4 @@
+output "setup-kubectl-context" {
+  value = "kubectl cluster-info --context kind-${var.cluster_name}"
+
+}
diff --git a/local-setup/kind/variables.tf b/local-setup/kind/variables.tf
new file mode 100644
index 0000000..7de342a
--- /dev/null
+++ b/local-setup/kind/variables.tf
@@ -0,0 +1,14 @@
+variable "cluster_name" {
+  description = "Name of the kind cluster"
+  type        = string
+
+}
+
+
+variable "http_ingress_port" {
+  type = number
+}
+
+variable "https_ingress_port" {
+  type = number
+}
diff --git a/local-setup/main.tf b/local-setup/main.tf
new file mode 100644
index 0000000..ae48a0b
--- /dev/null
+++ b/local-setup/main.tf
@@ -0,0 +1,19 @@
+module "kind" {
+  source             = "./kind"
+  cluster_name       = var.cluster_name
+  http_ingress_port  = var.http_ingress_port
+  https_ingress_port = var.https_ingress_port
+}
+
+
+module "argocd" {
+  source        = "./argocd"
+  depends_on    = [module.kind]
+  app_name      = var.app_name
+  project_name  = var.project_name
+  repo_url      = var.repo_url
+  target_path   = var.target_path
+  target_branch = var.target_branch
+}
+
+
diff --git a/local-setup/outputs.tf b/local-setup/outputs.tf
new file mode 100644
index 0000000..1652e29
--- /dev/null
+++ b/local-setup/outputs.tf
@@ -0,0 +1,3 @@
+output "setup-kubectl-context" {
+  value = "To setup kubctl context run: ${module.kind.setup-kubectl-context}"
+}
diff --git a/local-setup/provider.tf b/local-setup/provider.tf
new file mode 100644
index 0000000..9fccea6
--- /dev/null
+++ b/local-setup/provider.tf
@@ -0,0 +1,5 @@
+provider "helm" {
+  kubernetes {
+    config_path = "~/.kube/config"
+  }
+}
diff --git a/local-setup/variables.tf b/local-setup/variables.tf
new file mode 100644
index 0000000..d89de4e
--- /dev/null
+++ b/local-setup/variables.tf
@@ -0,0 +1,45 @@
+variable "cluster_name" {
+  description = "Name of the kind cluster"
+  type        = string
+
+}
+
+
+variable "http_ingress_port" {
+  type    = number
+  default = 8888
+}
+
+variable "https_ingress_port" {
+  type    = number
+  default = 4444
+}
+
+variable "app_name" {
+  type        = string
+  description = "github Application Name"
+  default     = "nginx-app"
+}
+
+variable "project_name" {
+  type        = string
+  description = "ArgoCD Project Name"
+  default     = "default"
+}
+
+variable "target_branch" {
+  type        = string
+  description = "Target Branch Name"
+  default     = "main"
+}
+
+variable "repo_url" {
+  type        = string
+  description = "Repo URL"
+  default     = "https://github.com/amarouane-ABDELHAK/eks-apps"
+}
+variable "target_path" {
+  type        = string
+  description = "Target app"
+  default     = "app/nginx_app"
+}
-- 
2.43.5

