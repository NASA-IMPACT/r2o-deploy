name: R2O CI/CD Pipeline
# Use bash for all steps
defaults:
  run:
    shell: bash -l {0}

permissions:
  id-token: write
  contents: read
  issues: write

on:
  push:
    branches:
      - dev
      - main
      - production
      - feature/add-iam-anywhere

jobs:

  define-environment:
    name: Set âœ¨ environment âœ¨ based on the branch ðŸŒ³
    runs-on: ubuntu-latest
    steps:
      - name: Set the environment
        id: define_environment
        run: |
          if [ "${{ github.ref_name }}" == "dev" ]; then
            echo "env_name=development" >> $GITHUB_OUTPUT
            echo "runner_name=NEO-RUNNER" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "main" ]; then
            echo "env_name=staging" >> $GITHUB_OUTPUT
            echo "runner_name=dgx01" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "production" ]; then
            echo "env_name=production" >> $GITHUB_OUTPUT
            echo "runner_name=xxxx" >> $GITHUB_OUTPUT
          else
            echo "No environment associated with ${GITHUB_REF##*/} branch"
            echo "runner_name=NEO-RUNNER" >> $GITHUB_OUTPUT
          fi
      - name: Print the environment
        if: ${{ steps.define_environment.outputs.env_name }}
        run: echo "The environment is ${{ steps.define_environment.outputs.env_name }}"
    outputs:
      env_name: ${{ steps.define_environment.outputs.env_name }}
      runner_name: ${{ steps.define_environment.outputs.runner_name }}
  deploy:
    runs-on: ${{ needs.define-environment.outputs.runner_name }}
    environment: ${{ needs.define-environment.outputs.env_name }}
    needs: define-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.DEPLOY_ROLE_NAME }}
          aws-region: us-west-2

      - name: Get secret from AWS Secrets Manager and create .env file
        env:
          SECRET_NAME: ${{ vars.SECRET_NAME }}
          $AWS_REGION: us-west-2
        run: |
          source ${{ vars.PYTHON_VENV_PATH }}
          SECRET_STRING=$(aws secretsmanager get-secret-value \
            --secret-id "$SECRET_NAME" \
            --region "$AWS_REGION" \
            --query SecretString \
            --output text)
          echo "$SECRET_STRING" | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env
      - name: Deploy to server
        run: |
          make local-deploy
      - name: Deploy to AWS-Cloud
        run: |
          make cloud-deploy
